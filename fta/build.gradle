apply plugin: "groovy"
apply plugin: "org.gradle.test-retry"

repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:3.0.4'                                  // Groovy
    compile('org.spockframework:spock-core:2.0-M2-groovy-3.0') {                    // Spock test framework
        exclude group: "org.codehaus.groovy" // exclude groovy from the dependencies for spock-core
    }
    compile "org.spockframework:spock-junit4:2.0-M2-groovy-3.0"                     // Workaround for Spock and JUnit 5 incompatibility
    compile 'com.aoe:geb-spock-reports:0.3.0-RC1'                                   // Provides screenshots for reports
    compile('com.athaydes:spock-reports:2.0-RC2') {                                 // HTML Report for test run
        transitive = false // this avoids affecting the version of Groovy/Spock
    }
    compile 'org.slf4j:slf4j-api:1.7.30'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'commons-io:commons-io:2.6'
    compile 'org.assertj:assertj-core:3.15.0'                                       // AssertJ methods
    compile 'org.gradle:test-retry-gradle-plugin:1.1.9'
}

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.gradle:test-retry-gradle-plugin:1.1.9'
    }
}

tasks.withType(Test) {
    useJUnitPlatform()

    maxHeapSize = '1g'

    maxParallelForks = 2

    // Enabling this will drastically increase the console log file size
    testLogging.showStandardStreams = false

    // Task with type Test belong to Verification task group.
    group JavaBasePlugin.VERIFICATION_GROUP

    systemProperties = System.properties
    systemProperty 'geb.env', System.getProperty('geb.env') ?: 'testEnv'
    systemProperty 'forceAllTests', System.getProperty('forceAllTests') ?: false
    testLogging {
        events 'started', 'passed'
    }
    retry {
        maxRetries = 3
        maxFailures = 20
        failOnPassedAfterRetry = false
    }

    afterTest { desc, result ->
        def totalTime = result.endTime - result.startTime
        logger.lifecycle("***Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}***" + " execution took " + totalTime + " milliseconds")
    }
}

tasks.withType(JavaForkOptions) {
    jvmArgs "-Xmx1024m"
}

test {
    systemProperty 'appUrl', 'local4200'
}

task pipelineTests(type: Test) {
    systemProperty 'spock.configuration', 'PipelineSpockConfig.groovy'
}